using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;

namespace AddisonWesley.Michaelis.EssentialCSharp.Chapter15.Listing15_14.Tests
{

    [TestClass]
    public class ProgramTests
    {
        [TestMethod]
        public void SelectingAnonymousTypeFollowingGroupClause()
        {
            string expected = $@"(abstract, 1)
(abstract, 2)
(abstract, 3)
(add*, 1)
(add*, 2)
(add*, 3)
(alias*, 1)
(alias*, 2)
(alias*, 3)
(as, 1)
(as, 2)
(as, 3)
(ascending*, 1)
(ascending*, 2)
(ascending*, 3)
(async*, 1)
(async*, 2)
(async*, 3)
(await*, 1)
(await*, 2)
(await*, 3)
(base, 1)
(base, 2)
(base, 3)
(bool, 1)
(bool, 2)
(bool, 3)
(break, 1)
(break, 2)
(break, 3)
(by*, 1)
(by*, 2)
(by*, 3)
(byte, 1)
(byte, 2)
(byte, 3)
(case, 1)
(case, 2)
(case, 3)
(catch, 1)
(catch, 2)
(catch, 3)
(char, 1)
(char, 2)
(char, 3)
(checked, 1)
(checked, 2)
(checked, 3)
(class, 1)
(class, 2)
(class, 3)
(const, 1)
(const, 2)
(const, 3)
(continue, 1)
(continue, 2)
(continue, 3)
(decimal, 1)
(decimal, 2)
(decimal, 3)
(default, 1)
(default, 2)
(default, 3)
(delegate, 1)
(delegate, 2)
(delegate, 3)
(descending*, 1)
(descending*, 2)
(descending*, 3)
(do, 1)
(do, 2)
(do, 3)
(double, 1)
(double, 2)
(double, 3)
(dynamic*, 1)
(dynamic*, 2)
(dynamic*, 3)
(else, 1)
(else, 2)
(else, 3)
(enum, 1)
(enum, 2)
(enum, 3)
(event, 1)
(event, 2)
(event, 3)
(equals*, 1)
(equals*, 2)
(equals*, 3)
(explicit, 1)
(explicit, 2)
(explicit, 3)
(extern, 1)
(extern, 2)
(extern, 3)
(false, 1)
(false, 2)
(false, 3)
(finally, 1)
(finally, 2)
(finally, 3)
(fixed, 1)
(fixed, 2)
(fixed, 3)
(from*, 1)
(from*, 2)
(from*, 3)
(float, 1)
(float, 2)
(float, 3)
(for, 1)
(for, 2)
(for, 3)
(foreach, 1)
(foreach, 2)
(foreach, 3)
(get*, 1)
(get*, 2)
(get*, 3)
(global*, 1)
(global*, 2)
(global*, 3)
(group*, 1)
(group*, 2)
(group*, 3)
(goto, 1)
(goto, 2)
(goto, 3)
(if, 1)
(if, 2)
(if, 3)
(implicit, 1)
(implicit, 2)
(implicit, 3)
(in, 1)
(in, 2)
(in, 3)
(int, 1)
(int, 2)
(int, 3)
(into*, 1)
(into*, 2)
(into*, 3)
(interface, 1)
(interface, 2)
(interface, 3)
(internal, 1)
(internal, 2)
(internal, 3)
(is, 1)
(is, 2)
(is, 3)
(lock, 1)
(lock, 2)
(lock, 3)
(long, 1)
(long, 2)
(long, 3)
(join*, 1)
(join*, 2)
(join*, 3)
(let*, 1)
(let*, 2)
(let*, 3)
(nameof*, 1)
(nameof*, 2)
(nameof*, 3)
(namespace, 1)
(namespace, 2)
(namespace, 3)
(new, 1)
(new, 2)
(new, 3)
(null, 1)
(null, 2)
(null, 3)
(on*, 1)
(on*, 2)
(on*, 3)
(operator, 1)
(operator, 2)
(operator, 3)
(orderby*, 1)
(orderby*, 2)
(orderby*, 3)
(out, 1)
(out, 2)
(out, 3)
(override, 1)
(override, 2)
(override, 3)
(object, 1)
(object, 2)
(object, 3)
(params, 1)
(params, 2)
(params, 3)
(partial*, 1)
(partial*, 2)
(partial*, 3)
(private, 1)
(private, 2)
(private, 3)
(protected, 1)
(protected, 2)
(protected, 3)
(public, 1)
(public, 2)
(public, 3)
(readonly, 1)
(readonly, 2)
(readonly, 3)
(ref, 1)
(ref, 2)
(ref, 3)
(remove*, 1)
(remove*, 2)
(remove*, 3)
(return, 1)
(return, 2)
(return, 3)
(sbyte, 1)
(sbyte, 2)
(sbyte, 3)
(sealed, 1)
(sealed, 2)
(sealed, 3)
(select*, 1)
(select*, 2)
(select*, 3)
(set*, 1)
(set*, 2)
(set*, 3)
(short, 1)
(short, 2)
(short, 3)
(sizeof, 1)
(sizeof, 2)
(sizeof, 3)
(stackalloc, 1)
(stackalloc, 2)
(stackalloc, 3)
(static, 1)
(static, 2)
(static, 3)
(string, 1)
(string, 2)
(string, 3)
(struct, 1)
(struct, 2)
(struct, 3)
(switch, 1)
(switch, 2)
(switch, 3)
(this, 1)
(this, 2)
(this, 3)
(throw, 1)
(throw, 2)
(throw, 3)
(true, 1)
(true, 2)
(true, 3)
(try, 1)
(try, 2)
(try, 3)
(typeof, 1)
(typeof, 2)
(typeof, 3)
(uint, 1)
(uint, 2)
(uint, 3)
(ulong, 1)
(ulong, 2)
(ulong, 3)
(unsafe, 1)
(unsafe, 2)
(unsafe, 3)
(ushort, 1)
(ushort, 2)
(ushort, 3)
(using, 1)
(using, 2)
(using, 3)
(value*, 1)
(value*, 2)
(value*, 3)
(var*, 1)
(var*, 2)
(var*, 3)
(virtual, 1)
(virtual, 2)
(virtual, 3)
(unchecked, 1)
(unchecked, 2)
(unchecked, 3)
(void, 1)
(void, 2)
(void, 3)
(volatile, 1)
(volatile, 2)
(volatile, 3)
(where*, 1)
(where*, 2)
(where*, 3)
(while, 1)
(while, 2)
(while, 3)
(yield*, 1)
(yield*, 2)
(yield*, 3)";
    

            IntelliTect.TestTools.Console.ConsoleAssert.ExpectLike(expected,
            () =>
            {
                Program.Main();
            });
        }
    }
}